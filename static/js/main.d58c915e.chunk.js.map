{"version":3,"sources":["components/ResultsColumn.tsx","components/Results.tsx","components/CountriesDropdown.tsx","components/SalaryInput.tsx","api/convertCurrency.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultsColumn","props","data","currency","className","map","figure","Results","selectedCurrency","annualSalaryBase","annualSalaryUSD","countryTaxRate","countryCurrency","currentSalaryBase","parseFloat","localTaxesBase","totalAnnualCostBase","approxMonthlyPayrollBase","currentSalaryUSD","localTaxesUSD","totalAnnualCostUSD","approxMonthlyPayrollUSD","toFixed","CountriesDropdown","countries","onSelect","controlClassName","options","onChange","placeholder","SalaryInput","salary","handleInputChange","handleInputSubmit","onChangeCurrency","makeCurrencyOptions","currencyOptions","useEffect","onSubmit","type","value","toString","convertCurrency","totalAnnualSalary","fromCurrency","toCurrency","axios","get","params","from","to","amount","then","response","catch","error","console","App","taxRates","useState","selectedCountry","showResult","state","setState","calculateResult","e","prevState","result","preventDefault","Object","keys","newCountry","countryName","tax_rate","newSalary","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAiBeA,EAdO,SAACC,GAA8B,IAC3CC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SAEd,OACE,qBAAKC,UAAU,iBAAf,SACGF,EAAKG,KAAI,SAACC,GAAD,OACR,8BACGA,EADH,IACYH,GAAsB,YC2D3BI,G,MAhEC,SAACN,GAAqC,IAIlDO,EAKEP,EALFO,iBACAC,EAIER,EAJFQ,iBACAC,EAGET,EAHFS,gBACAC,EAEEV,EAFFU,eACAC,EACEX,EADFW,gBAGIC,EAAoBC,WAAWL,GAC/BM,EAAiBF,EAAoBF,EACrCK,EAAsBH,EAAoBE,EAC1CE,EAA2BD,EAAsB,GAEjDE,EAAmBJ,WAAWJ,GAC9BS,EAAgBD,EAAmBP,EACnCS,EAAqBF,EAAmBC,EACxCE,EAA0BD,EAAqB,GAErD,OACE,sBAAKhB,UAAU,oBAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,gDACA,8CACA,oDACA,6DAEoB,QAArBI,GACC,cAAC,EAAD,CACEN,KAAM,CACJO,EACAM,EAAeO,QAAQ,GACvBN,EAAoBM,QAAQ,GAC5BL,EAAyBK,QAAQ,IAEnCnB,SAAUS,IAGd,cAAC,EAAD,CACEV,KAAM,CACJQ,EACAS,EAAcG,QAAQ,GACtBF,EAAmBE,QAAQ,GAC3BD,EAAwBC,QAAQ,IAElCnB,SAAU,QAEU,QAArBK,GACC,cAAC,EAAD,CACEN,KAAM,CACJO,EACAM,EAAeO,QAAQ,GACvBN,EAAoBM,QAAQ,GAC5BL,EAAyBK,QAAQ,IAEnCnB,SAAUS,S,gBCzCLW,G,MAhBW,SAACtB,GAAgD,IACjEuB,EAAwBvB,EAAxBuB,UAAWC,EAAaxB,EAAbwB,SACnB,OACE,qCACE,mEACA,cAAC,IAAD,CACErB,UAAU,qBACVsB,iBAAiB,gBACjBC,QAASH,EACTI,SAAUH,EACVI,YAAY,0BCmCLC,G,MA7CK,SAAC7B,GAAyC,IAI1D8B,EAKE9B,EALF8B,OACAnB,EAIEX,EAJFW,gBACAoB,EAGE/B,EAHF+B,kBACAC,EAEEhC,EAFFgC,kBACAC,EACEjC,EADFiC,iBAGIC,EAAsB,kBAC1BvB,EAAkB,CAACA,EAAiB,OAAS,CAAC,QAE5CwB,EAA4BD,IAMhC,OAJAE,qBAAU,WACRD,EAAkBD,MACjB,CAACvB,IAGF,sBAAMR,UAAU,eAAekC,SAAUL,EAAzC,SACE,sBAAK7B,UAAU,sBAAf,UACE,4CAEE,uBACEmC,KAAK,OACLX,SAAUI,EACVQ,MAAOT,EAAOU,gBAGlB,cAAC,IAAD,CACErC,UAAU,8BACVsB,iBAAiB,oBACjBC,QAASS,EACTI,MAAO5B,EACPgB,SAAUM,EACVL,YAAY,4B,gCCnBPa,EArBS,SACtBC,EACAC,EACAC,GAEA,OAAOC,IACJC,IAAY,wCAAyC,CACpDC,OAAQ,CACNC,KAAML,EACNM,GAAIL,EACJM,OAAQR,KAGXS,MAAK,SAACC,GAAD,OAAcA,EAASnD,QAC5BoD,OAAM,SAACC,GACNC,QAAQD,MACN,iECyGOE,EAhHH,WAAoB,IAFPC,EAEM,EACHC,mBAA4B,CACpDC,gBAAiB,GACjBjD,eAAgB,EAChBC,gBAAiB,GACjBJ,iBAAkB,GAClBC,iBAAkB,GAClBC,gBAAiB,GACjBmD,YAAY,IARe,mBACtBC,EADsB,KACfC,EADe,KA+CvBC,EAAkB,SAACC,GACQ,QAA3BH,EAAMtD,iBACRkC,EACEoB,EAAMrD,iBACNqD,EAAMtD,iBACN,OACA4C,MAAK,SAAClD,GACN6D,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPxD,gBAAiBR,EAAKiE,OAAO7C,QAAQ,GACrCuC,YAAY,UAIhBnB,EACEoB,EAAMpD,gBACN,MACAoD,EAAMlD,iBACNwC,MAAK,SAAClD,GACN6D,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPzD,iBAAkBP,EAAKiE,OAAO7C,QAAQ,GACtCuC,YAAY,UAKlBI,GAAKA,EAAEG,kBAGT,OACE,sBAAKhE,UAAU,MAAf,UACE,yDACA,sBAAKA,UAAU,aAAf,UACE,cAAC,EAAD,CACEoB,WApFekC,EAoFYA,EApFmBW,OAAOC,KAAKZ,IAqF1DjC,SArEgB,SAAC8C,GACvB,IAAMC,EAAcD,EAAW/B,MAC/BuB,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPN,gBAAiBY,EACjB7D,eAAgB+C,EAASc,GAAaC,SACtC7D,gBAAiB8C,EAASc,GAAarE,iBAiEV,KAA1B2D,EAAMF,iBACL,cAAC,EAAD,CACE7B,OAC6B,QAA3B+B,EAAMtD,iBACFsD,EAAMpD,gBACNoD,EAAMrD,iBAEZG,gBAAiBkD,EAAMlD,gBACvBsB,iBArDe,SAAC/B,GACxB4D,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEP1D,iBAAkBL,EAASqC,YAmDrBR,kBAtEa,SAACiC,GACtB,IAAMS,EAAYT,EAAEU,OAAOnC,MACI,QAA3BsB,EAAMtD,iBACRuD,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPzD,iBAAkBiE,OAGpBX,GAAS,SAACG,GAAD,mBAAC,eACLA,GADI,IAEPxD,gBAAiBgE,OAGrBV,KA0DQ/B,kBAAmB+B,OAIxBF,EAAMD,YACL,cAAC,EAAD,CACEpD,iBAAkBqD,EAAMrD,iBACxBC,gBAAiBoD,EAAMpD,gBACvBC,eAAgBmD,EAAMnD,eACtBH,iBAAkBsD,EAAMtD,iBACxBI,gBAAiBkD,EAAMlD,sBCtGlBgE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d58c915e.chunk.js","sourcesContent":["import React from \"react\";\nimport { ResultColumnProps } from \"../helpers/interfaces\";\n\nconst ResultsColumn = (props: ResultColumnProps) => {\n  const { data, currency } = props;\n\n  return (\n    <div className=\"results column\">\n      {data.map((figure) => (\n        <p>\n          {figure} {currency ? currency : \"\"}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default ResultsColumn;\n","import React from \"react\";\nimport { ResultsProps } from \"../helpers/interfaces\";\nimport ResultsColumn from \"./ResultsColumn\";\nimport \"../assets/styles/components/Results.scss\";\n\nconst Results = (props: ResultsProps): JSX.Element => {\n  // TODO: Style this Component.\n\n  const {\n    selectedCurrency,\n    annualSalaryBase,\n    annualSalaryUSD,\n    countryTaxRate,\n    countryCurrency,\n  } = props;\n\n  const currentSalaryBase = parseFloat(annualSalaryBase);\n  const localTaxesBase = currentSalaryBase * countryTaxRate;\n  const totalAnnualCostBase = currentSalaryBase + localTaxesBase;\n  const approxMonthlyPayrollBase = totalAnnualCostBase / 12;\n\n  const currentSalaryUSD = parseFloat(annualSalaryUSD);\n  const localTaxesUSD = currentSalaryUSD * countryTaxRate;\n  const totalAnnualCostUSD = currentSalaryUSD + localTaxesUSD;\n  const approxMonthlyPayrollUSD = totalAnnualCostUSD / 12;\n\n  return (\n    <div className=\"results container\">\n      <div className=\"results labels column\">\n        <p>Annual Salary: </p>\n        <p>Local Taxes: </p>\n        <p>Total Annual Cost: </p>\n        <p>Approx. Monthly Payroll: </p>\n      </div>\n      {selectedCurrency !== \"USD\" && (\n        <ResultsColumn\n          data={[\n            annualSalaryBase,\n            localTaxesBase.toFixed(2),\n            totalAnnualCostBase.toFixed(2),\n            approxMonthlyPayrollBase.toFixed(2),\n          ]}\n          currency={countryCurrency}\n        />\n      )}\n      <ResultsColumn\n        data={[\n          annualSalaryUSD,\n          localTaxesUSD.toFixed(2),\n          totalAnnualCostUSD.toFixed(2),\n          approxMonthlyPayrollUSD.toFixed(2),\n        ]}\n        currency={\"USD\"}\n      />\n      {selectedCurrency === \"USD\" && (\n        <ResultsColumn\n          data={[\n            annualSalaryBase,\n            localTaxesBase.toFixed(2),\n            totalAnnualCostBase.toFixed(2),\n            approxMonthlyPayrollBase.toFixed(2),\n          ]}\n          currency={countryCurrency}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\nimport Dropdown from \"react-dropdown\";\nimport { CountriesDropdownProps } from \"../helpers/interfaces\";\nimport \"../assets/styles/components/CountriesDropdown.scss\";\n\nconst CountriesDropdown = (props: CountriesDropdownProps): JSX.Element => {\n  const { countries, onSelect } = props;\n  return (\n    <>\n      <div>Which country are you hiring in?</div>\n      <Dropdown\n        className=\"dropdown-container\"\n        controlClassName=\"main-dropdown\"\n        options={countries}\n        onChange={onSelect}\n        placeholder=\"Select an option\"\n      />\n    </>\n  );\n};\n\nexport default CountriesDropdown;\n","import React, { useEffect } from \"react\";\nimport Dropdown from \"react-dropdown\";\nimport { SalaryInputProps } from \"../helpers/interfaces\";\nimport \"../assets/styles/components/SalaryInput.scss\";\n\nconst SalaryInput = (props: SalaryInputProps): JSX.Element => {\n  //TODO: Prevent inputs that aren't numbers or periods\n\n  const {\n    salary,\n    countryCurrency,\n    handleInputChange,\n    handleInputSubmit,\n    onChangeCurrency,\n  } = props;\n\n  const makeCurrencyOptions = () =>\n    countryCurrency ? [countryCurrency, \"USD\"] : [\"USD\"];\n\n  let currencyOptions: string[] = makeCurrencyOptions();\n\n  useEffect(() => {\n    currencyOptions = makeCurrencyOptions();\n  }, [countryCurrency]);\n\n  return (\n    <form className=\"salary-input\" onSubmit={handleInputSubmit}>\n      <div className=\"text-input-currency\">\n        <label>\n          Salary:\n          <input\n            type=\"text\"\n            onChange={handleInputChange}\n            value={salary.toString()}\n          />\n        </label>\n        <Dropdown\n          className=\"currency-dropdown-container\"\n          controlClassName=\"currency-dropdown\"\n          options={currencyOptions}\n          value={countryCurrency}\n          onChange={onChangeCurrency}\n          placeholder=\"Select an option\"\n        />\n      </div>\n      {/*<input type=\"submit\" value=\"Calculate\" />*/}\n    </form>\n  );\n};\n\nexport default SalaryInput;\n","import axios from \"axios\";\n\nconst convertCurrency = (\n  totalAnnualSalary: string,\n  fromCurrency: string,\n  toCurrency: string\n): Promise<any> => {\n  return axios\n    .get<string>(\"https://api.exchangerate.host/convert\", {\n      params: {\n        from: fromCurrency,\n        to: toCurrency,\n        amount: totalAnnualSalary,\n      },\n    })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\n        \"There was an error connecting to the conversion server...\"\n      );\n    });\n};\n\nexport default convertCurrency;\n","import React, { useState } from \"react\";\nimport Results from \"./components/Results\";\nimport CountriesDropdown from \"./components/CountriesDropdown\";\nimport SalaryInput from \"./components/SalaryInput\";\nimport \"./assets/styles/App.scss\";\nimport taxRates from \"./taxrates.json\";\nimport { appStateInterface } from \"./helpers/interfaces\";\nimport convertCurrency from \"./api/convertCurrency\";\n\nconst makeCountryList = (taxRates: object): string[] => Object.keys(taxRates);\n\nconst App = (): JSX.Element => {\n  const [state, setState] = useState<appStateInterface>({\n    selectedCountry: \"\",\n    countryTaxRate: 0,\n    countryCurrency: \"\",\n    selectedCurrency: \"\",\n    annualSalaryBase: \"\",\n    annualSalaryUSD: \"\",\n    showResult: false,\n  });\n\n  //TODO: Make app responsive\n  //TODO: Style the whole app\n\n  const onChangeCountry = (newCountry: { value: string; label: string }) => {\n    const countryName = newCountry.value;\n    setState((prevState) => ({\n      ...prevState,\n      selectedCountry: countryName,\n      countryTaxRate: taxRates[countryName].tax_rate,\n      countryCurrency: taxRates[countryName].currency,\n    }));\n  };\n\n  const onChangeSalary = (e: any) => {\n    const newSalary = e.target.value;\n    if (state.selectedCurrency !== \"USD\") {\n      setState((prevState) => ({\n        ...prevState,\n        annualSalaryBase: newSalary,\n      }));\n    } else {\n      setState((prevState) => ({\n        ...prevState,\n        annualSalaryUSD: newSalary,\n      }));\n    }\n    calculateResult();\n  };\n\n  const onChangeCurrency = (currency: any) => {\n    setState((prevState) => ({\n      ...prevState,\n      selectedCurrency: currency.value,\n    }));\n  };\n\n  const calculateResult = (e?: any) => {\n    if (state.selectedCurrency !== \"USD\") {\n      convertCurrency(\n        state.annualSalaryBase,\n        state.selectedCurrency as string,\n        \"USD\"\n      ).then((data) => {\n        setState((prevState) => ({\n          ...prevState,\n          annualSalaryUSD: data.result.toFixed(2),\n          showResult: true,\n        }));\n      });\n    } else {\n      convertCurrency(\n        state.annualSalaryUSD,\n        \"USD\",\n        state.countryCurrency as string\n      ).then((data) => {\n        setState((prevState) => ({\n          ...prevState,\n          annualSalaryBase: data.result.toFixed(2),\n          showResult: true,\n        }));\n      });\n    }\n\n    e && e.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Employer Tax Calculator</h1>\n      <div className=\"first-form\">\n        <CountriesDropdown\n          countries={makeCountryList(taxRates)}\n          onSelect={onChangeCountry}\n        />\n        {state.selectedCountry !== \"\" && (\n          <SalaryInput\n            salary={\n              state.selectedCurrency === \"USD\"\n                ? state.annualSalaryUSD\n                : state.annualSalaryBase\n            }\n            countryCurrency={state.countryCurrency as string}\n            onChangeCurrency={onChangeCurrency}\n            handleInputChange={onChangeSalary}\n            handleInputSubmit={calculateResult}\n          />\n        )}\n      </div>\n      {state.showResult && (\n        <Results\n          annualSalaryBase={state.annualSalaryBase as string}\n          annualSalaryUSD={state.annualSalaryUSD as string}\n          countryTaxRate={state.countryTaxRate}\n          selectedCurrency={state.selectedCurrency as string}\n          countryCurrency={state.countryCurrency as string}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}