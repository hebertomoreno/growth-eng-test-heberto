{"version":3,"sources":["components/ResultsColumn.tsx","components/Results.tsx","components/CountriesDropdown.tsx","components/SalaryInput.tsx","api/convertCurrency.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultsColumn","props","data","currency","className","map","figure","Results","selectedCurrency","annualSalaryBase","annualSalaryUSD","countryTaxRate","countryCurrency","currentSalaryBase","parseFloat","localTaxesBase","totalAnnualCostBase","approxMonthlyPayrollBase","currentSalaryUSD","localTaxesUSD","totalAnnualCostUSD","approxMonthlyPayrollUSD","Col","toFixed","CountriesDropdown","countries","onSelect","selectedCountry","Dropdown","Toggle","variant","id","Menu","option","Item","eventKey","SalaryInput","salary","handleInputChange","handleInputSubmit","onChangeCurrency","makeCurrencyOptions","currencyOptions","useEffect","Form","onSubmit","Group","controlId","Label","Control","onChange","onKeyPress","event","test","key","preventDefault","value","toString","placeholder","convertCurrency","totalAnnualSalary","fromCurrency","toCurrency","console","log","axios","get","params","from","to","amount","then","response","catch","error","App","taxRates","useState","showResult","state","setState","calculateResult","e","prevState","result","Container","Row","Object","keys","newCountry","countryName","tax_rate","newSalary","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98880906.chunk.js","sourcesContent":["import React from \"react\";\nimport { ResultColumnProps } from \"../helpers/interfaces\";\n\nconst ResultsColumn = (props: ResultColumnProps) => {\n  const { data, currency } = props;\n\n  return (\n    <div className=\"results column\">\n      {data.map((figure) => (\n        <p>\n          {figure} {currency ? currency : \"\"}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default ResultsColumn;\n","import React from \"react\";\nimport Col from \"react-bootstrap/col\";\nimport { ResultsProps } from \"../helpers/interfaces\";\nimport ResultsColumn from \"./ResultsColumn\";\nimport \"../assets/styles/components/Results.scss\";\n\nconst Results = (props: ResultsProps): JSX.Element => {\n  // TODO: Style this Component.\n\n  const {\n    selectedCurrency,\n    annualSalaryBase,\n    annualSalaryUSD,\n    countryTaxRate,\n    countryCurrency,\n  } = props;\n\n  const currentSalaryBase = parseFloat(annualSalaryBase);\n  const localTaxesBase = currentSalaryBase * countryTaxRate;\n  const totalAnnualCostBase = currentSalaryBase + localTaxesBase;\n  const approxMonthlyPayrollBase = totalAnnualCostBase / 12;\n\n  const currentSalaryUSD = parseFloat(annualSalaryUSD);\n  const localTaxesUSD = currentSalaryUSD * countryTaxRate;\n  const totalAnnualCostUSD = currentSalaryUSD + localTaxesUSD;\n  const approxMonthlyPayrollUSD = totalAnnualCostUSD / 12;\n\n  return (\n    <div className=\"results container\">\n      <Col>\n        <div className=\"results labels column\">\n          <p>Annual Salary: </p>\n          <p>Local Taxes: </p>\n          <p>Total Annual Cost: </p>\n          <p>Approx. Monthly Payroll: </p>\n        </div>\n      </Col>\n      {selectedCurrency !== \"USD\" && (\n        <Col>\n          <ResultsColumn\n            data={[\n              currentSalaryBase.toFixed(2),\n              localTaxesBase.toFixed(2),\n              totalAnnualCostBase.toFixed(2),\n              approxMonthlyPayrollBase.toFixed(2),\n            ]}\n            currency={countryCurrency}\n          />\n        </Col>\n      )}\n      <Col>\n        <ResultsColumn\n          data={[\n            currentSalaryUSD.toFixed(2),\n            localTaxesUSD.toFixed(2),\n            totalAnnualCostUSD.toFixed(2),\n            approxMonthlyPayrollUSD.toFixed(2),\n          ]}\n          currency={\"USD\"}\n        />\n      </Col>\n      {selectedCurrency === \"USD\" && (\n        <Col>\n          <ResultsColumn\n            data={[\n              annualSalaryBase,\n              localTaxesBase.toFixed(2),\n              totalAnnualCostBase.toFixed(2),\n              approxMonthlyPayrollBase.toFixed(2),\n            ]}\n            currency={countryCurrency}\n          />\n        </Col>\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\nimport Dropdown from \"react-bootstrap/dropdown\";\n//import Dropdown from \"react-dropdown\";\nimport { CountriesDropdownProps } from \"../helpers/interfaces\";\nimport \"../assets/styles/components/CountriesDropdown.scss\";\n\nconst CountriesDropdown = (props: CountriesDropdownProps): JSX.Element => {\n  const { countries, onSelect, selectedCountry } = props;\n\n  return (\n    <>\n      <h2>Which country are you hiring in?</h2>\n      <Dropdown onSelect={onSelect}>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n          {selectedCountry}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          {countries.map((option) => {\n            return <Dropdown.Item eventKey={option}>{option}</Dropdown.Item>;\n          })}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nexport default CountriesDropdown;\n","import React, { useEffect } from \"react\";\nimport Form from \"react-bootstrap/form\";\nimport Dropdown from \"react-bootstrap/dropdown\";\nimport { SalaryInputProps } from \"../helpers/interfaces\";\nimport \"../assets/styles/components/SalaryInput.scss\";\n\nconst SalaryInput = (props: SalaryInputProps): JSX.Element => {\n  //TODO: Prevent inputs that aren't numbers or periods\n\n  const {\n    salary,\n    countryCurrency,\n    handleInputChange,\n    handleInputSubmit,\n    onChangeCurrency,\n  } = props;\n\n  const makeCurrencyOptions = () =>\n    countryCurrency ? [countryCurrency, \"USD\"] : [\"USD\"];\n\n  let currencyOptions: string[] = makeCurrencyOptions();\n\n  useEffect(() => {\n    currencyOptions = makeCurrencyOptions();\n  }, [countryCurrency]);\n\n  return (\n    <Form className=\"salary-input\" onSubmit={handleInputSubmit}>\n      <div className=\"text-input-currency\">\n        <Form.Group className=\"mb-3\" controlId=\"formSalary\">\n          <Form.Label>\n            Salary:\n            <Form.Control\n              onChange={handleInputChange}\n              onKeyPress={(event: any) => {\n                if (!/[0-9]/.test(event.key)) {\n                  event.preventDefault();\n                }\n              }}\n              value={salary.toString()}\n              placeholder=\"Input yearly salary\"\n            />\n          </Form.Label>\n        </Form.Group>\n        <Dropdown onSelect={onChangeCurrency}>\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            {countryCurrency}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            {currencyOptions.map((option) => {\n              return <Dropdown.Item eventKey={option}>{option}</Dropdown.Item>;\n            })}\n          </Dropdown.Menu>\n        </Dropdown>\n        {/*<Dropdown\n          className=\"currency-dropdown-container\"\n          controlClassName=\"currency-dropdown\"\n          options={currencyOptions}\n          value={countryCurrency}\n          onChange={onChangeCurrency}\n          placeholder=\"Select an option\"\n        />*/}\n      </div>\n      {/*<input type=\"submit\" value=\"Calculate\" />*/}\n    </Form>\n  );\n};\n\nexport default SalaryInput;\n","import axios from \"axios\";\n\nconst convertCurrency = (\n  totalAnnualSalary: string,\n  fromCurrency: string,\n  toCurrency: string\n): Promise<any> => {\n  console.log(totalAnnualSalary, fromCurrency, toCurrency);\n  return axios\n    .get<string>(\"https://api.exchangerate.host/convert\", {\n      params: {\n        from: fromCurrency,\n        to: toCurrency,\n        amount: totalAnnualSalary,\n      },\n    })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\n        \"There was an error connecting to the conversion server...\"\n      );\n    });\n};\n\nexport default convertCurrency;\n","import React, { useState } from \"react\";\nimport Results from \"./components/Results\";\nimport { Container, Row } from \"react-bootstrap\";\nimport CountriesDropdown from \"./components/CountriesDropdown\";\nimport SalaryInput from \"./components/SalaryInput\";\nimport \"./assets/styles/App.scss\";\nimport taxRates from \"./taxrates.json\";\nimport { appStateInterface } from \"./helpers/interfaces\";\nimport convertCurrency from \"./api/convertCurrency\";\n\nconst makeCountryList = (taxRates: object): string[] => Object.keys(taxRates);\n\nconst App = (): JSX.Element => {\n  const [state, setState] = useState<appStateInterface>({\n    selectedCountry: \"Select an option\",\n    countryTaxRate: 0,\n    countryCurrency: \"\",\n    selectedCurrency: \"\",\n    annualSalaryBase: \"\",\n    annualSalaryUSD: \"0\",\n    showResult: false,\n  });\n\n  //TODO: Make app responsive\n  //TODO: Style the whole app\n\n  const onChangeCountry = (newCountry: string) => {\n    const countryName = newCountry;\n    const currency = taxRates[countryName].currency;\n\n    setState((prevState) => ({\n      ...prevState,\n      selectedCountry: countryName,\n      countryTaxRate: taxRates[countryName].tax_rate,\n      countryCurrency: currency,\n      selectedCurrency: currency,\n    }));\n  };\n\n  const onChangeSalary = (e: any) => {\n    const newSalary = e.target.value;\n    if (state.selectedCurrency !== \"USD\") {\n      setState((prevState) => ({\n        ...prevState,\n        annualSalaryBase: newSalary,\n      }));\n    } else {\n      setState((prevState) => ({\n        ...prevState,\n        annualSalaryUSD: newSalary,\n      }));\n    }\n    calculateResult();\n  };\n\n  const onChangeCurrency = (currency: any) => {\n    setState((prevState) => ({\n      ...prevState,\n      selectedCurrency: currency,\n    }));\n  };\n\n  const calculateResult = (e?: any) => {\n    if (state.selectedCurrency !== \"USD\") {\n      convertCurrency(\n        state.annualSalaryBase,\n        state.selectedCurrency as string,\n        \"USD\"\n      ).then((data) => {\n        setState((prevState) => ({\n          ...prevState,\n          annualSalaryUSD: data.result ? data.result.toFixed(2) : \"0\",\n          showResult: true,\n        }));\n      });\n    } else {\n      convertCurrency(\n        state.annualSalaryUSD,\n        \"USD\",\n        state.countryCurrency as string\n      ).then((data) => {\n        setState((prevState) => ({\n          ...prevState,\n          annualSalaryBase: data.result ? data.result.toFixed(2) : \"0\",\n          showResult: true,\n        }));\n      });\n    }\n\n    e && e.preventDefault();\n  };\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <h1>Employer Tax Calculator</h1>\n      </Row>\n      <Row>\n        <CountriesDropdown\n          selectedCountry={state.selectedCountry as string}\n          countries={makeCountryList(taxRates)}\n          onSelect={onChangeCountry}\n        />\n      </Row>\n      <Row>\n        {state.selectedCountry !== \"\" && (\n          <SalaryInput\n            salary={\n              state.selectedCurrency === \"USD\"\n                ? state.annualSalaryUSD\n                : state.annualSalaryBase\n            }\n            countryCurrency={state.countryCurrency as string}\n            onChangeCurrency={onChangeCurrency}\n            handleInputChange={onChangeSalary}\n            handleInputSubmit={calculateResult}\n          />\n        )}\n      </Row>\n      <Row>\n        {state.showResult && (\n          <Results\n            annualSalaryBase={state.annualSalaryBase as string}\n            annualSalaryUSD={state.annualSalaryUSD as string}\n            countryTaxRate={state.countryTaxRate}\n            selectedCurrency={state.selectedCurrency as string}\n            countryCurrency={state.countryCurrency as string}\n          />\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}